generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum CardStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum SubscriptionPlan {
  FREE
  PRO
  BUSINESS
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  plan         SubscriptionPlan @default(FREE)
  planExpires  DateTime?
  planStarted  DateTime?
  planUpdated  DateTime?
  role          UserRole  @default(USER)
  stripeCustomerId      String?   @db.VarChar(255)
  stripeSubscriptionId  String?   @db.VarChar(255)
  accounts      Account[]
  sessions      Session[]
  workspaces    Workspace[]
  assignedCards Card[]    @relation("CardAssignees")
  workspaceMemberships WorkspaceMember[]
  notifications Notification[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  lastLogin     DateTime?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id      String   @id @default(cuid())
  name    String
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  boards  Board[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  members WorkspaceMember[]
  invitations Invitation[]
  analyticsCaches AnalyticsCache[]
}

model Board {
  id          String    @id @default(cuid())
  title       String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  lists       List[]
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  completedAt DateTime?
}

model List {
  id        String   @id @default(cuid())
  title     String
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
}

model Card {
  id          String      @id @default(cuid())
  title       String
  description String?     @db.Text
  listId      String
  list        List        @relation(fields: [listId], references: [id], onDelete: Cascade)
  order       Int         @default(0)
  dueDate     DateTime?
  completed   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  completedAt DateTime?

  status      CardStatus  @default(TODO)
  assignees   User[]      @relation("CardAssignees")
}

model WorkspaceMember {
  id        String   @id @default(cuid())
  userId    String
  workspaceId String
  role      String  // "OWNER", "ADMIN", "MEMBER"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@unique([userId, workspaceId])
}

model Invitation {
  id          String    @id @default(cuid())
  email       String
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  role        String
  token       String    @unique
  expiresAt   DateTime
  createdAt   DateTime  @default(now())

  @@unique([email, workspaceId])
}

model Notification {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  message     String    @db.Text
  type        String    // "TASK_ASSIGNED", "DUE_DATE", "INVITATION", etc.
  isRead      Boolean   @default(false)
  linkTo      String?   // URL to redirect when clicked
  createdAt   DateTime  @default(now())
  relatedId   String?   // ID of related entity (taskId, workspaceId, etc.)
}

model AnalyticsCache {
  id            String   @id @default(cuid())
  workspaceId   String
  workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  dataType      String   // "PRODUCTIVITY", "COMPLETION_RATE", etc.
  data          Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}